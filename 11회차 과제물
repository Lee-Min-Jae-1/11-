// 테이블 생성
create table TESTTable (
    TEST_NUM varchar(16) not null,
    CUSTOMER varchar(16) not null,
    PRIMARY KEY (TEST_NUM)
);

//데이터 삽입
 INSERT INTO TESTTable(TEST_NUM, CUSTOMER) VALUES (1, MINJAE);

//데이터 조회
SELECT * FROM TESTTable;

//데이터 수정
UPDATE TESTTable SET column1 = value1, colu,m2 = value2 [WHERE 절];

//데이터 삭제
DELETE FROM TESTTable select TEST_NUM = '1';

//사원 테이블
CREATE TABLE employees
   ( UID INT NOT NULL,  
   PRIMARY KEY(UID) 
);

//급여 테이블
CREATE TABLE salaries
   ( emp_no INT NOT NULL, 
   salary INT NOT NULL, 
   from_date DATE NOT NULL, 
   to_date DATE, 
   FOREIGN KEY(emp_no) REFERENCES employees (UID) ON DELETE CASCADE, 
   PRIMARY KEY(emp_no, from_date) 
);


//사용자 계정 추가
CREATE USER SUPER@localhost IDENTIFIED BY 'password';

//계정 정보 확인
SHOW GRANTS FOR SUPER@localhost;

//사용자 계정 제거
DROP user super@localhost;

//권하 부여
GRANT SELECT, UPDATE ON biz.* TO super;

//권한 회수
REVOKE all ON *.* FROM super@localhost;

//'배송도시’ 인덱스를 삭제한다. 
ALTER TABLE Teat1 DROP INDEX idx배송도시;

//‘주문일+적입포인트’ 인덱스를 삭제한다. 
ALTER TABLE Teat1 DROP INDEX idx주문일포인트;

//‘고객번호’ 인덱스를 삭제한다. 
ALTER TABLE Teat1 DROP INDEX idx고객번호;

//‘고객번호’ 컬럼에 대해 UNIQUE 인덱스를 생성한다
CREATE UNIQUE INDEX idx고객번호 on Teat1 (고객번호);

//쿼리문을 이용하여 뷰를 생성한다.
CREATE VIEW CHECK_LOGIN_VIEW AS select UID, PASSWORD from EMP;

//생성된 뷰에 대해 응용 프로그램은 다음과 같은 쿼리문을 사용할 수 있다.
SELECT UID FROM CHECK_LOGIN_VIEW WHERE UID=’user’, PASSWORD=’pw’;
//여기서 ‘user’와 ‘pw’는 사용자가 입력한 정보를 의미한다. 그리고 이와 같은 쿼리 문의 결과로 반환되는 결과가 존재하면 로그인 성공으로 판정할 수 있다.

//쿼리문을 이용하여 뷰를 생성한다.
CREATE VIEW CHECK_WORKPLACE_VIEW AS select UID, NAME, WORKPLACE from EMP WHERE WORKPLACE IN (‘서울’,‘부산’);

//UPDATE 문을 수행
UPDATE CHECK_WORKPLACE_VIEW SET NAME=’도길동‘, WORKPLACE=’부산‘ WHERE　 UID = 1090;

//기존에 생성한 뷰 삭제하기
DROP VIEW CHECK_LOGIN_VIEW; DROP VIEW CHECK_WORKPLACE_VIEW; DROP VIEW CHECK_WORKDAY_VIEW;

//제품의 코드와 이름, 설명을 보기 위한 실질적인 SQL문
SELECT productCode, productName, textDescription FROM products t1, productlines t2 WHERE t1.productLine = t2.productLine;
 
//내부 조인의 명시적 선언은 테이블 사이에 INNER JOIN 이라는 명령어를 삽입함으로써 이루어짐. 동일한 결과를 얻을 수 있는 내부 조인 SQL문
SELECT productCode, productName, textDescription FROM product t1 INNER JOIN product t2 ON t1.productLine = t2.productLine;

//동일한 결과를 내는데 ON 대신에 USING을 이용한 SQL문
SELECT productCode, productName, textDescription FROM products t1 INNER JOIN productlines t2 USING (productLine);

//동일한 결과를 얻을 수 있는 자연 조인 SQL문
SELECT productCode, productName, textDescription FROM product t1 NATURAL JOIN productlines t2;

//외부 조인은 기준이 되는 테이블을 중심으로 데이터를 구성한다. 다음 SQL 문
SELECT prouctCode, productName, textDescription FROM products t1 LEFT OUTER JOIN productlines t2 ON t1.productLine = t2.productLine;

//집합 연산의 일종인 UNION의 사용 형식
SELECT coulum1, column2 UNION [DISTICT | ALL] SELECT column1, column2

//상기 설명한 프로시저의 구성에 기반한 프로시저의 문법은 아래와 같다.
CREATE [OR REPLACE] PROCEDURE [PROCEDURE_NAME] (PARAMETER_1 [MODE] DATA_TYPE1, PARAMETER_2 [MODE] DATA_TYPE2, ...) 
IS [AS] 
... 
BEGIN 
... 
[SQL] [CONTROL] 
... 
[EXCEPTION] 
... 
[COMMIT/ROLLBACK] 
END;

//매출 마감 처리를 하는 간단한 프로시저이다. 
CREATE OR REPLACE PROCEDURE SALES_CLOSNG — 매출마감처리 
(V_CLOSING_DATE IN CHAR(8)) -- 마감일자 
IS 
BEGIN V_SALES_TOT_AMT NUMBERS; -- 매출총액 
SELECT SUM(SALES_AMT) -- 매출액  
INTO V_SALES_TOT_AMT FROM SALES_LIST_T -- 판매내역 
WHERE SALES_DATE = V_CLOSING_DATE;        -- 판매일자
EXCEPTION  WHEN NO_DATA_FOUND THEN -- 데이터 미존재시    
SET V_SALES_TOT_AMT = 0; -- 매출총액에 0 입력
INSERT　INTO -- 삽입 SALES_CLOSED_T -- 
마감내역 TABLE (SALES_DATE, SALES_TOT_AMT) VALUES(V_CLOSING_DATE, V_DALES_TOT_AMT);
EXCEPTION WHEN NO_DATA_FOUND THEN -- 데이터 미존재시  
SET SALES_TOT_AMT = 0;
COMMIT; END;

//사용자 정의함수는 생일을 입력받아 나이를 출력하는 간단한 예시
CREATE OR REPLACE FUNCTION GET_AGE 
(V_BIRTH_DATE IN CHAR(8)) 
IS 
BEGIN 
V_CURRENT_YEAR CHAR(4); -- 현재 연도 
V_BIRTH_YEAR CHAR(4); -- 생년 
V_AGE NUMBER; -- 나이 
SELECT TO_CHAR(SYSDATE,'YYYY') -- 현재 일자에서 년도만 추출 , 
SUBSTR(V_BIRTH_DATE,1,4) -- 생년월일에서 앞 4자리 추출 
INTO V_CURRENT_YEAR -- 현재 년도(4자리) , V_BIRTH_YEAR -- 생년월일 년도(4자리) 
FROM DUAL ; SET AGE = TO_NUMBER(V_CURRENT_YEAR) - TO_NUMBER(V_BIRTH_YEAR) + 1; -- 현재 연도와 생년의 차에 1을 더함 
RETURN AGE; -- 나이를 반환 
END;



//트리거 작성의 예제


CREATE OR REPLACE TRIGGER PUT_EMPLOYEE_INFO_HISTORY -- 직원 정보 이력 입력 
AFTER UPDATE -- 수정 후
 ON EMPLOYEE_INFO_T -- 직원 정보 테이블 대상 
FOR EACH ROW -- ROW 단위 건별 
BEGIN INSERT INTO EMPLOYEE_INFO_H -- 직원 정보 이력 테이블 
( EMPLOYEE_ID ,
 SEQ_VAL , 
EMPLOYEE_NAME , 
EMPLOYEE_DEPT , 
EMPLOYEE_ADDRESS , 
EMPLOYEE_CP_NO 
) 
( :OLD.EMPLOYEE_ID --기존 ID , 
SEQ_VAL.NEXT_VAL --이력 순번 , 
:NEW.EMPLOYEE_NAME --신규 성명 , 
:NEW.EMPLOYEE_DEPT --신규 부서 , 
:NEW.EMPLOYEE_ADDRESS --신규 주소 , 
:NEW.EMPLOYEE_CP_NO --신규 핸드폰 번호 
) ;
END;
